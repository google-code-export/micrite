<?xml version="1.0" encoding="UTF-8"?>
<!--
/* ===========================================================
 * $Id$
 * This file is part of Micrite
 * ===========================================================
 *
 * (C) Copyright 2009, by Gaixie.org and Contributors.
 * 
 * Project Info:  http://micrite.gaixie.org/
 *
 * Micrite is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Micrite is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Micrite.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
-->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:sec="http://www.springframework.org/schema/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.4.xsd">

    <bean class="org.springframework.security.event.authentication.LoggerListener"/>   
    <bean class="org.springframework.security.event.authorization.LoggerListener"/>   

    <!-- ===================== SECURITY DEFINITIONS ======================= -->
	<sec:http access-denied-page="/403.jsp" >
	    <sec:intercept-url pattern="/" filters="none" />
        <sec:intercept-url pattern="/index.jsp" filters="none" />
        <sec:intercept-url pattern="/*/locale/**" filters="none" />
        <sec:intercept-url pattern="/login*" filters="none" />
        <sec:intercept-url pattern="/expire.jsp" filters="none" />
        <sec:intercept-url pattern="/security/images/**" filters="none" />
        <sec:intercept-url pattern="/js-lib/**" filters="none" />
        <sec:form-login login-page="/expire.jsp" authentication-failure-url="/loginFailed.action" default-target-url="/loginSuccess.action"  />
        <sec:logout logout-success-url="/index.jsp"/>
        <sec:http-basic />
    </sec:http>

    <!-- ~~~~~~~~~~~~~~~~~~~~ AUTHENTICATION DEFINITIONS ~~~~~~~~~~~~~~~~~~ -->
    <bean id="authenticationManager" class="org.springframework.security.providers.ProviderManager">  
        <property name="providers">  
            <list>  
                <ref local="daoAuthenticationProvider" />  
            </list>  
        </property>  
        <!-- <property name="sessionController" ref="concurrentSessionController" /> -->  
    </bean>  
    
    <bean id="daoAuthenticationProvider"  
        class="org.springframework.security.providers.dao.DaoAuthenticationProvider">  
        <sec:custom-authentication-provider />
        <property name="passwordEncoder" ref="passwordEncoder" /> 
        <property name="userDetailsService" ref="userDetailsService" />
        <property name="userCache" ref="userCache" /> 
    </bean>  
    
    <bean id="passwordEncoder"  
        class="org.springframework.security.providers.encoding.Md5PasswordEncoder" /> 

    <bean id="userDetailsService"  
        class="org.gaixie.micrite.security.service.impl.UserDetailsServiceImpl" /> 
    
    <!-- 使用Ehcache缓存user信息 -->        
    <bean id="userCache"
        class="org.springframework.security.providers.dao.cache.EhCacheBasedUserCache">
        <property name="cache" ref="userCacheBacked" />
    </bean>
    
    <bean id="userCacheBacked"
        class="org.springframework.cache.ehcache.EhCacheFactoryBean">
        <property name="cacheManager" ref="cacheManager" />
        <property name="cacheName" value="userCache" />
    </bean>

    <bean id="cacheManager"
        class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache-security.xml" />
    </bean>
                

    <!-- ~~~~~~~~~~~~~~~~~~~~ AUTHORIZATION DEFINITIONS ~~~~~~~~~~~~~~~~~~ -->
    <!--
        经过投票机制来决定是否可以访问某一资源
        allowIfAllAbstainDecisions为false时如果有一个或以上的decisionVoters投票通过,则授权通过
    -->
    <bean id="accessDecisionManager" class="org.springframework.security.vote.AffirmativeBased">
        <property name="allowIfAllAbstainDecisions" value="false"/>
        <property name="decisionVoters">
            <list>
                <bean class="org.springframework.security.vote.RoleVoter">
                    <property name="rolePrefix" value="" />
                </bean>
            </list>
        </property>
    </bean>

    <!-- ~~~~~~~~~~~~~~~~~~~~ SECURITY URL INTERCEPTOR DEFINITIONS ~~~~~~~~~~~~~~~~~~~ -->
    <bean id="urlSecurityInterceptor" class="org.springframework.security.intercept.web.FilterSecurityInterceptor">
        <sec:custom-filter before="FILTER_SECURITY_INTERCEPTOR" />
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="accessDecisionManager" ref="accessDecisionManager"/>
        <property name="objectDefinitionSource" ref="urlDefinitionSource" />
    </bean>

    <!-- 获取访问被访问的URL所需要的权限（authority），以ConfigAttributeDefinition形式返回 -->
    <bean id="urlDefinitionSource"
        class="org.springframework.security.intercept.web.DefaultFilterInvocationDefinitionSource">
        <!-- 匹配URL的matcher -->
        <constructor-arg type="org.springframework.security.util.UrlMatcher"
            ref="antUrlPathMatcher" />
        <!-- URL对应authority的map -->
        <constructor-arg type="java.util.LinkedHashMap" ref="requestMap" />
    </bean>

    <bean id="antUrlPathMatcher"
        class="org.springframework.security.util.AntUrlPathMatcher" />

    <bean id="requestMap"
        class="org.gaixie.micrite.security.filter.RequestMapFactoryBean" init-method="init" />

         
    <!-- ~~~~~~~~~~~~~~~~~~~~ SECURITY METHOD INTERCEPTOR DEFINITIONS ~~~~~~~~~~~~~~~~~~~ -->      
    <bean id="methodSecurityInterceptor"
        class="org.springframework.security.intercept.method.aopalliance.MethodSecurityInterceptor">
        <property name="authenticationManager" ref="authenticationManager" />
        <property name="accessDecisionManager" ref="accessDecisionManager" />
        <property name="objectDefinitionSource" ref="methodDefinitionSource" />
    </bean>

    <!-- 获取访问被访问的Method所需要的权限（authority），以ConfigAttributeDefinition形式返回 -->    
    <bean id="methodDefinitionSource"
        class="org.gaixie.micrite.security.filter.DefaultMethodDefinitionSource">
        <constructor-arg index="0">
            <bean class="org.gaixie.micrite.security.filter.AspectJMethodMatcher" />
        </constructor-arg>
        <constructor-arg index="1">
            <bean class="org.gaixie.micrite.security.filter.MethodMapFactoryBean" />
        </constructor-arg>
    </bean>
    
    <!-- 使用Spring AOP，当访问所有service包下以Service结尾的类的任何方法时，任何方法时，
          通知accessDeniedInterceptor和methodSecurityInterceptor两个拦截器。 -->     
    <aop:config>  
        <aop:pointcut id="securityPointcut"  
            expression="execution(* org.gaixie.micrite..service.*Service+.*(..))" />  
        <aop:advisor advice-ref="accessDeniedInterceptor" 
            pointcut-ref="securityPointcut" order="0" />  
        <aop:advisor advice-ref="methodSecurityInterceptor"  
            pointcut-ref="securityPointcut" order="1" />  
    </aop:config>

    <bean id="accessDeniedInterceptor"
        class="org.gaixie.micrite.security.filter.AccessDeniedInterceptor" />
            
</beans>
